"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7359],{3905:function(n,t,e){e.d(t,{Zo:function(){return g},kt:function(){return d}});var l=e(7294);function i(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function u(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,l)}return e}function o(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?u(Object(e),!0).forEach((function(t){i(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):u(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function r(n,t){if(null==n)return{};var e,l,i=function(n,t){if(null==n)return{};var e,l,i={},u=Object.keys(n);for(l=0;l<u.length;l++)e=u[l],t.indexOf(e)>=0||(i[e]=n[e]);return i}(n,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(n);for(l=0;l<u.length;l++)e=u[l],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var a=l.createContext({}),c=function(n){var t=l.useContext(a),e=t;return n&&(e="function"==typeof n?n(t):o(o({},t),n)),e},g=function(n){var t=c(n.components);return l.createElement(a.Provider,{value:t},n.children)},s={inlineCode:"code",wrapper:function(n){var t=n.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(n,t){var e=n.components,i=n.mdxType,u=n.originalType,a=n.parentName,g=r(n,["components","mdxType","originalType","parentName"]),k=c(e),d=i,p=k["".concat(a,".").concat(d)]||k[d]||s[d]||u;return e?l.createElement(p,o(o({ref:t},g),{},{components:e})):l.createElement(p,o({ref:t},g))}));function d(n,t){var e=arguments,i=t&&t.mdxType;if("string"==typeof n||i){var u=e.length,o=new Array(u);o[0]=k;var r={};for(var a in t)hasOwnProperty.call(t,a)&&(r[a]=t[a]);r.originalType=n,r.mdxType="string"==typeof n?n:i,o[1]=r;for(var c=2;c<u;c++)o[c]=e[c];return l.createElement.apply(null,o)}return l.createElement.apply(null,e)}k.displayName="MDXCreateElement"},8563:function(n,t,e){e.r(t),e.d(t,{assets:function(){return g},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return s}});var l=e(7462),i=e(3366),u=(e(7294),e(3905)),o=["components"],r={sidebar_position:8},a="Account system",c={unversionedId:"tkg-integration/sdk-basic/sdk-func-account",id:"version-3.0.x/tkg-integration/sdk-basic/sdk-func-account",title:"Account system",description:"Account login",source:"@site/i18n/en/docusaurus-plugin-content-docs/version-3.0.x/tkg-integration/sdk-basic/sdk-func-account.md",sourceDirName:"tkg-integration/sdk-basic",slug:"/tkg-integration/sdk-basic/sdk-func-account",permalink:"/tkg-sdk-doc/tkg-integration/sdk-basic/sdk-func-account",tags:[],version:"3.0.x",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"In App Purchase",permalink:"/tkg-sdk-doc/tkg-integration/sdk-basic/sdk-func-iap"},next:{title:"Advanced Integration",permalink:"/tkg-sdk-doc/tkg-integration/sdk-other-func"}},g={},s=[{value:"Account login",id:"account-login",level:2},{value:"Account logout",id:"account-logout",level:2},{value:"Login Mode Query interface",id:"login-mode-query-interface",level:2},{value:"Account delete",id:"account-delete",level:2},{value:"Account Binding",id:"account-binding",level:2},{value:"Forced binding",id:"forced-binding",level:2}],k={toc:s};function d(n){var t=n.components,e=(0,i.Z)(n,o);return(0,u.kt)("wrapper",(0,l.Z)({},k,e,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("h1",{id:"account-system"},"Account system"),(0,u.kt)("h2",{id:"account-login"},"Account login"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-c"},'TKGSDKManager.Instance.Login(LoginType.LOGIN_BY_GOOGLE, (loginStatus,  loginType,  loginMsg,  userId,  token,  email,  nickName,  iconUrl) =>{\n\n    Debug.Log("Login status code:"+loginStatus);\n    Debug.Log("Login type:" + loginType);\n    Debug.Log("Login status information:" + loginMsg);\n    Debug.Log("User ID:" + userId);\n    Debug.Log("token:" + token);\n    Debug.Log("email:" + email);\n    Debug.Log("nickName:" + nickName);\n    Debug.Log("icon url:" + iconUrl);\n    \n});\n\n')),(0,u.kt)("p",null,(0,u.kt)("strong",{parentName:"p"}," API: "),"     "),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"void Login(LoginType _loginType, Action<LoginStatus, LoginType, string, string, string, string,string,string> _loginResultCallback)\n")),(0,u.kt)("table",null,(0,u.kt)("tr",null,(0,u.kt)("td",null,"Name"),(0,u.kt)("td",null,"isRequired"),(0,u.kt)("td",null,"Type"),(0,u.kt)("td",null,"Description")),(0,u.kt)("tr",null,(0,u.kt)("td",null,"_loginType"),(0,u.kt)("td",null,"Y"),(0,u.kt)("td",null,"string"),(0,u.kt)("td",null,"Login type:",(0,u.kt)("br",null),"LoginType.LOGIN_BY_GUESTER  (guester login)",(0,u.kt)("br",null),"LoginType.LOGIN_BY_EMAIL    (email login)",(0,u.kt)("br",null),"LoginType.LOGIN_BY_GOOGLE   (Google login)",(0,u.kt)("br",null),"LoginType.LOGIN_BY_FACEBOOK (Facebook login)",(0,u.kt)("br",null),"LoginType.LOGIN_BY_Apple    (Apple login)",(0,u.kt)("br",null))),(0,u.kt)("tr",null,(0,u.kt)("td",null,"_loginResultCallback"),(0,u.kt)("td",null,"Y"),(0,u.kt)("td",null,"Action"),(0,u.kt)("td",null,"Login callback:",(0,u.kt)("br",null),"loginStatus: Login status code",(0,u.kt)("br",null),"loginType: Login type",(0,u.kt)("br",null),"loginMsg: Login status information",(0,u.kt)("br",null),"userId: userid",(0,u.kt)("br",null),"token: token",(0,u.kt)("br",null),"email: email",(0,u.kt)("br",null),"nickName: nickName",(0,u.kt)("br",null),"iconUrl: iconUrl",(0,u.kt)("br",null)))),(0,u.kt)("h2",{id:"account-logout"},"Account logout"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-c"},"TKGSDKManager.Instance.Logout();\n")),(0,u.kt)("p",null,(0,u.kt)("strong",{parentName:"p"}," API: "),"     "),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"void Logout(Action _logoutCallback = null)\n")),(0,u.kt)("table",null,(0,u.kt)("tr",null,(0,u.kt)("td",null,"Name"),(0,u.kt)("td",null,"isRequired"),(0,u.kt)("td",null,"Type"),(0,u.kt)("td",null,"Description")),(0,u.kt)("tr",null,(0,u.kt)("td",null,"_logoutCallback"),(0,u.kt)("td",null,"N"),(0,u.kt)("td",null,"Action"),(0,u.kt)("td",null,"Logout login callback"))),(0,u.kt)("h2",{id:"login-mode-query-interface"},"Login Mode Query interface"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-c"},"List<LoginType> list = TKGSDKManager.Instance.AvailableLoginChannelList();\n")),(0,u.kt)("p",null,(0,u.kt)("strong",{parentName:"p"}," API: "),"     "),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"List<LoginType> AvailableLoginChannelList();\n")),(0,u.kt)("table",null,(0,u.kt)("tr",null,(0,u.kt)("td",null,"Type"),(0,u.kt)("td",null,"Description")),(0,u.kt)("tr",null,(0,u.kt)("td",null,"List <LoginType> "),(0,u.kt)("td",null,"Returns the currently available login type."))),(0,u.kt)("h2",{id:"account-delete"},"Account delete"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-c"},"TKGSDKManager.Instance.DeleteAccount();\n")),(0,u.kt)("p",null,(0,u.kt)("strong",{parentName:"p"}," API: "),"     "),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"//DeleteStatus.DELETE_ACCOUNT_FAILED  delete fail\n//DeleteStatus.DELETE_ACCOUNT_CANCEL  delete cancel\n//DeleteStatus.DELETE_ACCOUNT_SUCC    delete success\n\nvoid DeleteAccount(Action<DeleteStatus,string> _deleteAccountCallback = null);\n")),(0,u.kt)("table",null,(0,u.kt)("tr",null,(0,u.kt)("td",null,"Name"),(0,u.kt)("td",null,"isRequired"),(0,u.kt)("td",null,"Type"),(0,u.kt)("td",null,"Description")),(0,u.kt)("tr",null,(0,u.kt)("td",null,"_deleteAccountCallback"),(0,u.kt)("td",null,"N"),(0,u.kt)("td",null,"Action <DeleteStatus,string> "),(0,u.kt)("td",null,"Deleting an account callback returns the deleted userId & statusCode."))),(0,u.kt)("h2",{id:"account-binding"},"Account Binding"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-c"},'\nTKGSDKManager.Instance.BindAccount(LoginType.LOGIN_BY_FACEBOOK,(bindAccountStatus,loginType,loginMsg,userId,token,email,nickName,iconUrl,userIdList)=> {\n\n    Debug.Log("bind account status:" + bindAccountStatus);\n    Debug.Log("login type:" + loginType);\n    Debug.Log("login message:" + loginMsg);\n    Debug.Log("user ID:" + userId);\n    Debug.Log("token:" + token);\n    Debug.Log("email:" + email);\n    Debug.Log("nick name:" + nickName);\n    Debug.Log("icon url:" + iconUrl);\n    Debug.Log("userId list\uff1a"+userIdList);\n\n});\n')),(0,u.kt)("p",null,(0,u.kt)("strong",{parentName:"p"}," API: "),"     "),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"void BindAccount(LoginType type,\n    Action<BindAccountStatus, LoginType, string, string, string, string, string, string, string[]>\n        _bindAccountCallback)\n")),(0,u.kt)("table",null,(0,u.kt)("tr",null,(0,u.kt)("td",null,"Name"),(0,u.kt)("td",null,"isRequired"),(0,u.kt)("td",null,"Type"),(0,u.kt)("td",null,"Description")),(0,u.kt)("tr",null,(0,u.kt)("td",null,"_loginType"),(0,u.kt)("td",null,"Y"),(0,u.kt)("td",null,"string"),(0,u.kt)("td",null,"Login type:",(0,u.kt)("br",null),"LoginType.LOGIN_BY_GUESTER  (guester login)",(0,u.kt)("br",null),"LoginType.LOGIN_BY_EMAIL    (email login)",(0,u.kt)("br",null),"LoginType.LOGIN_BY_GOOGLE   (Google login)",(0,u.kt)("br",null),"LoginType.LOGIN_BY_FACEBOOK (Facebook login)",(0,u.kt)("br",null),"LoginType.LOGIN_BY_Apple    (Apple login)",(0,u.kt)("br",null))),(0,u.kt)("tr",null,(0,u.kt)("td",null,"_bindAccountCallback"),(0,u.kt)("td",null,"Y"),(0,u.kt)("td",null,"Action"),(0,u.kt)("td",null,"Binding callback\uff1a",(0,u.kt)("br",null),"bindAccountStatus\uff1abinding account status",(0,u.kt)("br",null),"loginType\uff1alogin type",(0,u.kt)("br",null),"loginMsg\uff1a login message",(0,u.kt)("br",null),"userId\uff1auserId",(0,u.kt)("br",null),"token\uff1atoken",(0,u.kt)("br",null),"email\uff1aemail",(0,u.kt)("br",null),"nickName\uff1anick name",(0,u.kt)("br",null),"iconUrl\uff1aicon url",(0,u.kt)("br",null),"userIdList\uff1auser id list",(0,u.kt)("br",null)))),(0,u.kt)("p",null,(0,u.kt)("strong",{parentName:"p"},"Binding status code\uff1a")," ",(0,u.kt)("br",null),"\nBindAccountStatus.BIND_CODE_SUCC    // binding success ",(0,u.kt)("br",null),"\nBindAccountStatus.BIND_CODE_SELECT  // binding select ",(0,u.kt)("br",null),"\nBindAccountStatus.BIND_CODE_FAILED  // binding failed ",(0,u.kt)("br",null),"\nBindAccountStatus.BIND_CODE_CANCEL  // binding cancel ",(0,u.kt)("br",null)),(0,u.kt)("h2",{id:"forced-binding"},"Forced binding"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-c"},'\nTKGSDKManager.Instance.ForceBindAccount("userId001",(bindAccountStatus,loginType,loginMsg,userId,token,email,nickName,iconUrl,userIdList)=> {\n\n    Debug.Log("Binding status code:" + bindAccountStatus);\n    Debug.Log("login type:" + loginType);\n    Debug.Log("login message:" + loginMsg);\n    Debug.Log("user ID:" + userId);\n    Debug.Log("token:" + token);\n    Debug.Log("email:" + email);\n    Debug.Log("nick name:" + nickName);\n    Debug.Log("icon url:" + iconUrl);\n    Debug.Log("userId list\uff1a"+userIdList);\n\n});\n')),(0,u.kt)("p",null,(0,u.kt)("strong",{parentName:"p"}," API: "),"     "),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"void ForceBindAccount(string userId,\n    Action<BindAccountStatus, LoginType, string, string, string, string, string, string, string[]>\n        _bindAccountCallback)\n")),(0,u.kt)("table",null,(0,u.kt)("tr",null,(0,u.kt)("td",null,"Name"),(0,u.kt)("td",null,"isRequired"),(0,u.kt)("td",null,"Type"),(0,u.kt)("td",null,"Description")),(0,u.kt)("tr",null,(0,u.kt)("td",null,"userId"),(0,u.kt)("td",null,"Y"),(0,u.kt)("td",null,"string"),(0,u.kt)("td",null,"userId")),(0,u.kt)("tr",null,(0,u.kt)("td",null,"_bindAccountCallback"),(0,u.kt)("td",null,"Y"),(0,u.kt)("td",null,"Action"),(0,u.kt)("td",null,"Binding callback\uff1a",(0,u.kt)("br",null),"bindAccountStatus\uff1abinding account status",(0,u.kt)("br",null),"loginType\uff1alogin type",(0,u.kt)("br",null),"loginMsg\uff1a login message",(0,u.kt)("br",null),"userId\uff1auserId",(0,u.kt)("br",null),"token\uff1atoken",(0,u.kt)("br",null),"email\uff1aemail",(0,u.kt)("br",null),"nickName\uff1anick name",(0,u.kt)("br",null),"iconUrl\uff1aicon url",(0,u.kt)("br",null),"userIdList\uff1auser id list",(0,u.kt)("br",null)))))}d.isMDXComponent=!0}}]);