"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[449],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),l=p(n),u=i,f=l["".concat(c,".").concat(u)]||l[u]||g[u]||s;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=l;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var p=2;p<s;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},2547:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return g}});var r=n(7462),i=n(3366),s=(n(7294),n(3905)),o=["components"],a={sidebar_position:7},c="For iOS",p={unversionedId:"tkg-integration/sdk-projectsettings/sdk-projectsettings-ios",id:"tkg-integration/sdk-projectsettings/sdk-projectsettings-ios",title:"For iOS",description:"Unity Settings",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/tkg-integration/sdk-projectsettings/sdk-projectsettings-ios.md",sourceDirName:"tkg-integration/sdk-projectsettings",slug:"/tkg-integration/sdk-projectsettings/sdk-projectsettings-ios",permalink:"/tkg-sdk-doc/tkg-integration/sdk-projectsettings/sdk-projectsettings-ios",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"For android",permalink:"/tkg-sdk-doc/tkg-integration/sdk-projectsettings/sdk-projectsettings-android"},next:{title:"Android Integration Verification",permalink:"/tkg-sdk-doc/tkg-integration/sdk-test/sdk-test-android"}},d={},g=[{value:"Unity Settings",id:"unity-settings",level:3},{value:"1. Project Settings -&gt; Player -&gt; Scripting Defin Symbols : IOS_CN",id:"1-project-settings---player---scripting-defin-symbols--ios_cn",level:4},{value:"Xcode Settings",id:"xcode-settings",level:3},{value:"2. Add dynamic library for ads sdk",id:"2-add-dynamic-library-for-ads-sdk",level:4}],l={toc:g};function u(e){var t=e.components,a=(0,i.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"for-ios"},"For iOS"),(0,s.kt)("h3",{id:"unity-settings"},"Unity Settings"),(0,s.kt)("h4",{id:"1-project-settings---player---scripting-defin-symbols--ios_cn"},"1. Project Settings -> Player -> Scripting Defin Symbols : IOS_CN"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"iOS Symbols",src:n(2899).Z,width:"605",height:"312"})),(0,s.kt)("h3",{id:"xcode-settings"},"Xcode Settings"),(0,s.kt)("h4",{id:"2-add-dynamic-library-for-ads-sdk"},"2. Add dynamic library for ads sdk"),(0,s.kt)("p",null,"Step1.",(0,s.kt)("br",{parentName:"p"}),"\n",(0,s.kt)("img",{alt:"ks_02_re01",src:n(7487).Z,width:"1280",height:"316"}),"\nStep2.",(0,s.kt)("br",{parentName:"p"}),"\n",(0,s.kt)("img",{alt:"ks_03_re02",src:n(7150).Z,width:"1280",height:"835"}),"\nStep3.",(0,s.kt)("br",{parentName:"p"}),"\n",(0,s.kt)("img",{alt:"ks_04_re03",src:n(7014).Z,width:"1280",height:"835"}),"\nStep4.",(0,s.kt)("br",{parentName:"p"}),"\n",(0,s.kt)("img",{alt:"ks_05_re04",src:n(4532).Z,width:"1280",height:"540"}),"\nStep5.",(0,s.kt)("br",{parentName:"p"}),"\n",(0,s.kt)("img",{alt:"ks_06_re05",src:n(4580).Z,width:"1218",height:"797"}),"\nStep6.",(0,s.kt)("br",{parentName:"p"}),"\n",(0,s.kt)("img",{alt:"ks_07_re06",src:n(6060).Z,width:"1280",height:"851"}),"\nStep7.",(0,s.kt)("br",{parentName:"p"}),"\n",(0,s.kt)("img",{alt:"ks_08_re07",src:n(2111).Z,width:"1280",height:"745"})),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"The script shown in the screenshot:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'# Type a script or drag a script file from your workspace to insert its path.\nAPP_PATH="${TARGET_BUILD_DIR}/${WRAPPER_NAME}"\n\n# This script loops through the frameworks embedded in the application and\n# removes unused architectures.\nfind "$APP_PATH" -name \'*.framework\' -type d | while read -r FRAMEWORK\ndo\n  FRAMEWORK_EXECUTABLE_NAME=$(defaults read "$FRAMEWORK/Info.plist" CFBundleExecutable)\n  FRAMEWORK_EXECUTABLE_PATH="$FRAMEWORK/$FRAMEWORK_EXECUTABLE_NAME"\n  echo "Executable is $FRAMEWORK_EXECUTABLE_PATH"\n  # ignore non-fat framework\n  IS_FAT=$(lipo -info $FRAMEWORK_EXECUTABLE_PATH | grep \'Non-fat\')\n  if [[ ${IS_FAT} ]]; then\n    echo "ignoring ${FRAMEWORK_EXECUTABLE_PATH} because it\'s a Non-fat binary"\n    continue\n  fi\n\n  EXTRACTED_ARCHS=()\n\n  for ARCH in $ARCHS\n  do\n    echo "Extracting $ARCH from $FRAMEWORK_EXECUTABLE_NAME"\n    lipo -extract "$ARCH" "$FRAMEWORK_EXECUTABLE_PATH" -o "$FRAMEWORK_EXECUTABLE_PATH-$ARCH"\n    EXTRACTED_ARCHS+=("$FRAMEWORK_EXECUTABLE_PATH-$ARCH")\n  done\n\n  echo "Merging extracted architectures: ${ARCHS}"\n  lipo -o "$FRAMEWORK_EXECUTABLE_PATH-merged" -create "${EXTRACTED_ARCHS[@]}"\n  rm "${EXTRACTED_ARCHS[@]}"\n\n  echo "Replacing original executable with thinned version"\n  rm "$FRAMEWORK_EXECUTABLE_PATH"\n  mv "$FRAMEWORK_EXECUTABLE_PATH-merged" "$FRAMEWORK_EXECUTABLE_PATH"\n\ndone\n')))}u.isMDXComponent=!0},2899:function(e,t,n){t.Z=n.p+"assets/images/iOSSymbols-6df046926f8307107ab1ced33a318913.jpg"},7487:function(e,t,n){t.Z=n.p+"assets/images/ks_02_re01-7e6efdf7f65ce192c3f100d79fef2a2d.png"},7150:function(e,t,n){t.Z=n.p+"assets/images/ks_03_re02-145d54b11a7a54be4e932cca9acdb8ce.png"},7014:function(e,t,n){t.Z=n.p+"assets/images/ks_04_re03-145d54b11a7a54be4e932cca9acdb8ce.png"},4532:function(e,t,n){t.Z=n.p+"assets/images/ks_05_re04-1cf67c85923ef2eccd605e705d4c79ed.png"},4580:function(e,t,n){t.Z=n.p+"assets/images/ks_06_re05-f85848c08cd972d6a50b197f97479de0.png"},6060:function(e,t,n){t.Z=n.p+"assets/images/ks_07_re06-ce7d9e665c27d2cb6ad6c810f9957b68.png"},2111:function(e,t,n){t.Z=n.p+"assets/images/ks_08_re07-835f7ff93e8ff488e0544623b22de982.png"}}]);