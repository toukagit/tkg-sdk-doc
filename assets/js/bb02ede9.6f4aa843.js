(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{104:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return b}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),d=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=d(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=d(n),u=r,b=m["".concat(o,".").concat(u)]||m[u]||p[u]||a;return n?i.a.createElement(b,s(s({ref:t},l),{},{components:n})):i.a.createElement(b,s({ref:t},l))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return d}));var r=n(3),i=n(7),a=(n(0),n(104)),o={title:"Reverse Proxy",description:""},s={unversionedId:"configuration/reverse-proxy",id:"configuration/reverse-proxy",isDocsHomePage:!1,title:"Reverse Proxy",description:"Introduction",source:"@site/docs/configuration/reverse-proxy.md",slug:"/configuration/reverse-proxy",permalink:"/tkg-sdk-doc/configuration/reverse-proxy",editUrl:"https://github.com/getmeli/meli-docs/edit/latest/docs/configuration/reverse-proxy.md",version:"current",sidebar:"docs",previous:{title:"Email configuration",permalink:"/tkg-sdk-doc/configuration/emails"},next:{title:"Permissions",permalink:"/tkg-sdk-doc/core/permissions"}},c=[{value:"Introduction",id:"introduction",children:[]},{value:"Configure Meli",id:"configure-meli",children:[]},{value:"Wildcard Certificates from Let&#39;s Encrypt",id:"wildcard-certificates-from-lets-encrypt",children:[]},{value:"Reverse Proxy Configuration",id:"reverse-proxy-configuration",children:[{value:"Nginx",id:"nginx",children:[]},{value:"Traefik",id:"traefik",children:[]}]}],l={toc:c};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"introduction"},"Introduction"),Object(a.b)("div",{className:"admonition admonition-danger alert alert--danger"},Object(a.b)("div",{parentName:"div",className:"admonition-heading"},Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",{parentName:"h5",className:"admonition-icon"},Object(a.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(a.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),Object(a.b)("div",{parentName:"div",className:"admonition-content"},Object(a.b)("p",{parentName:"div"},"The most simple use case is to deploy Meli on a single VPS, or have it co-exist with other containers on a VPS by giving it its own IP (failover). It will make your life a lot easier. In particular, it will save you the hassle of managing your SSL certificates. "))),Object(a.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(a.b)("div",{parentName:"div",className:"admonition-heading"},Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",{parentName:"h5",className:"admonition-icon"},Object(a.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(a.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(a.b)("div",{parentName:"div",className:"admonition-content"},Object(a.b)("p",{parentName:"div"},"Branch SSL certificates are not supported at the moment because you would need to generate a wildcard certificate for each site. We will be fixing this soon. Custom domain SSL certificate management is also your responsibility."))),Object(a.b)("p",null,"Meli by default uses Caddy's automatic HTTPS support to deploy with Let's Encrypt certificates for your configured domain. However, deployment behind a reverse proxy is supported, but you will need to handle SSL certificate issuance and renewal on your own - you will want to get a wildcard SSL certificate instead. We assume you have followed the ",Object(a.b)("a",{parentName:"p",href:"/get-started/installation"},"installation guide"),"."),Object(a.b)("h2",{id:"configure-meli"},"Configure Meli"),Object(a.b)("p",null,"The following needs to be done in your ",Object(a.b)("inlineCode",{parentName:"p"},"docker-compose.yml")," file:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Make sure ",Object(a.b)("inlineCode",{parentName:"li"},"MELI_URL")," is set to have ",Object(a.b)("inlineCode",{parentName:"li"},"https")," as it's scheme"),Object(a.b)("li",{parentName:"ol"},"Change the ports"),Object(a.b)("li",{parentName:"ol"},"Add the environment variable ",Object(a.b)("inlineCode",{parentName:"li"},"MELI_HTTPS_AUTO: 0")," to stop automatic provisioning of SSL certificates")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-yaml"},'version: "3"\n\nservices:\n    \n  meli:\n  image: getmeli/meli:beta\n  ports:\n    # change the host port to your liking\n    - 8005:80\n  environment:\n    # ...\n    # add this\n    MELI_HTTPS_AUTO: 0\n')),Object(a.b)("h2",{id:"wildcard-certificates-from-lets-encrypt"},"Wildcard Certificates from Let's Encrypt"),Object(a.b)("p",null,"Depending on your setup, you may choose to setup wildcard certificates from Let's Encrypt on your own. This can be done by using certbot:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-shell"},"certbot certonly \\\n --manual \\\n --preferred-challenges dns-01 \\\n --server https://acme-v02.api.letsencrypt.org/directory \\\n -d '*.meli.yourdomain.com' -d 'meli.yourdomain.com'\n")),Object(a.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(a.b)("div",{parentName:"div",className:"admonition-heading"},Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",{parentName:"h5",className:"admonition-icon"},Object(a.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(a.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(a.b)("div",{parentName:"div",className:"admonition-content"},Object(a.b)("p",{parentName:"div"},"You will also have to generate wildcard certificates for site branches. We plan to simplify this process."))),Object(a.b)("p",null,"Please change the domain names to reflect your setup."),Object(a.b)("div",{className:"admonition admonition-info alert alert--info"},Object(a.b)("div",{parentName:"div",className:"admonition-heading"},Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",{parentName:"h5",className:"admonition-icon"},Object(a.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(a.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(a.b)("div",{parentName:"div",className:"admonition-content"},Object(a.b)("p",{parentName:"div"},"Domains are enclosed within quotes to avoid shell errors."))),Object(a.b)("p",null,"Certbot will let you know that you need to setup ",Object(a.b)("inlineCode",{parentName:"p"},"TXT")," records with your DNS provider, and upon doing so your certificates will be generated. This process can also be automated using plugins. Check out ",Object(a.b)("a",{parentName:"p",href:"https://certbot.eff.org/docs/using.html#dns-plugins"},"this")," page from Certbot docs to see if there is a compatible plugin for your DNS provider."),Object(a.b)("h2",{id:"reverse-proxy-configuration"},"Reverse Proxy Configuration"),Object(a.b)("h3",{id:"nginx"},"Nginx"),Object(a.b)("p",null,"If you are deploying Meli to a server that is running Nginx, you may use the following configuration file as a starting point."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-conf"},"server {\n    listen 443 ssl;\n    server_name *.meli.yourdomain.com;\n\n    location / {\n        proxy_pass http://localhost:8005; # change this port according to your setup\n        proxy_set_header Host $host;\n        proxy_request_buffering off;\n    }\n\n    # assuming you are using let's encrypt certificates\n    ssl_certificate /etc/letsencrypt/live/meli.yourdomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/meli.yourdomain.com/privkey.pem;\n    include /etc/letsencrypt/options-ssl-nginx.conf;\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\n}\n\nserver {\n    listen 443 ssl;\n    server_name meli.yourdomain.com;\n\n    location / {\n        proxy_pass http://localhost:8005; # change this port according to your setup\n        proxy_set_header Host $host;\n        proxy_request_buffering off;\n    }\n\n    # assuming you are using let's encrypt certificates\n    ssl_certificate /etc/letsencrypt/live/meli.yourdomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/meli.yourdomain.com/privkey.pem;\n    include /etc/letsencrypt/options-ssl-nginx.conf;\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\n}\n\nserver {\n    if ($host = *.meli.yourdomain.com) {\n        return 301 https://$host$request_uri;\n    }\n\n\n    listen 80;\n\n    server_name *.meli.yourdomain.com;\n    return 404;\n}\n\nserver {\n    if ($host = meli.yourdomain.com) {\n        return 301 https://$host$request_uri;\n    }\n\n\n    listen 80;\n\n    server_name meli.yourdomain.com;\n    return 404;\n}\n\n")),Object(a.b)("h3",{id:"traefik"},"Traefik"),Object(a.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(a.b)("div",{parentName:"div",className:"admonition-heading"},Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",{parentName:"h5",className:"admonition-icon"},Object(a.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(a.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(a.b)("div",{parentName:"div",className:"admonition-content"},Object(a.b)("p",{parentName:"div"},"Branches are not supported at the moment because you would need to generate a wildcard certificate for each site. We'll be fixing this soon."))),Object(a.b)("p",null,"To deploy Meli behind a Traefik reverse proxy, you'll need to:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"define a ",Object(a.b)("a",{parentName:"li",href:"https://doc.traefik.io/traefik/user-guides/docker-compose/acme-dns/"},"DNS challenge")," certificate resolver"),Object(a.b)("li",{parentName:"ol"},"configure Traefik for Meli so that it generates wildcard certificates"),Object(a.b)("li",{parentName:"ol"},"disable Meli's default HTTPs configuration to delegate it to Traefik. This is done by setting ",Object(a.b)("inlineCode",{parentName:"li"},'MELI_HTTPS_AUTO: "false"'),".")),Object(a.b)("p",null,"Here is an example using the OVH DNS challenge provider:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-yaml"},"version: '3.7'\nservices:\n\n  traefik:\n    image: traefik:2.3\n    container_name: traefik\n    restart: unless-stopped\n    command:\n      - '--log.level=INFO'\n      - '--api.dashboard=true'\n      - '--accesslog=true'\n      - '--providers.docker=true'\n      - '--providers.docker.exposedbydefault=false'\n      - '--entrypoints.websecure.address=:443'\n      - '--entrypoints.web.address=:80'\n      - '--entrypoints.web.http.redirections.entrypoint.to=websecure'\n      - '--entrypoints.web.http.redirections.entrypoint.scheme=https'\n      # DNS challenge resolver\n      - '--certificatesresolvers.letsencrypt-dns.acme.email=info@domain.com'\n      - '--certificatesresolvers.letsencrypt-dns.acme.storage=/letsencrypt-dns/acme-dns.json'\n      - '--certificatesresolvers.letsencrypt-dns.acme.dnschallenge=true'\n      - '--certificatesresolvers.letsencrypt-dns.acme.dnschallenge.provider=ovh'\n      - '--certificatesresolvers.letsencrypt-dns.acme.dnschallenge.delaybeforecheck=0'\n      - '--certificatesresolvers.letsencrypt-dns.acme.dnsChallenge.resolvers=1.1.1.1:53,8.8.8.8:53'\n      # uncomment this during your tests to use LetsEncrypt staging server\n      #- '--certificatesresolvers.letsencrypt-dns.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory'\n    env_file:\n      # contains OVH environment variables (this is specific to your DNS challenge provider)\n      - traefik.env\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /data/traefik/letsencrypt:/letsencrypt\n      - /data/traefik/letsencrypt-dns:/letsencrypt-dns\n\n  meli:\n    image: getmeli/meli:beta\n    environment:\n      MELI_URL: https://meli.domain.com\n      MELI_MONGO_URI: mongodb://meli_mongo:27017/meli\n      MELI_HTTPS_AUTO: \"false\"\n    env_file:\n      - meli.env\n    volumes:\n      - /data/meli/sites:/sites\n      - /data/meli/files:/files\n      - /data/meli/caddy/data:/data\n      - /data/meli/caddy/config:/config\n    depends_on:\n      - meli_mongo\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.services.meli.loadbalancer.server.port=80\"\n      # use regex matching to route primary and subdomains here\n      - \"traefik.http.routers.meli.rule=HostRegexp(`meli.domain.com`, `{subdomain:.+}.meli.domain.com`)\"\n      # tell Traefik to generate a wildcard certificate for this domain\n      - \"traefik.http.routers.meli.tls.certresolver=letsencrypt-dns\"\n      - \"traefik.http.routers.meli.tls.domains[0].main=meli.domain.com\"\n      - \"traefik.http.routers.meli.tls.domains[0].sans=*.meli.domain.com\"\n      - \"traefik.http.routers.meli.entrypoints=websecure\"\n\n  meli_mongo:\n    image: mongo:4.2-bionic\n    restart: unless-stopped\n    volumes:\n      - /data/meli/mongo:/data/db\n")))}d.isMDXComponent=!0}}]);