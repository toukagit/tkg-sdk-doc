"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7359],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return p}});var i=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=i.createContext({}),c=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=c(e.components);return i.createElement(u.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,u=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),d=c(t),p=l,k=d["".concat(u,".").concat(p)]||d[p]||g[p]||o;return t?i.createElement(k,a(a({ref:n},s),{},{components:t})):i.createElement(k,a({ref:n},s))}));function p(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,a=new Array(o);a[0]=d;var r={};for(var u in n)hasOwnProperty.call(n,u)&&(r[u]=n[u]);r.originalType=e,r.mdxType="string"==typeof e?e:l,a[1]=r;for(var c=2;c<o;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8563:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return u},default:function(){return p},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return g}});var i=t(7462),l=t(3366),o=(t(7294),t(3905)),a=["components"],r={sidebar_position:8},u="Account system",c={unversionedId:"tkg-integration/sdk-basic/sdk-func-account",id:"version-3.0.x/tkg-integration/sdk-basic/sdk-func-account",title:"Account system",description:"Account login",source:"@site/i18n/en/docusaurus-plugin-content-docs/version-3.0.x/tkg-integration/sdk-basic/sdk-func-account.md",sourceDirName:"tkg-integration/sdk-basic",slug:"/tkg-integration/sdk-basic/sdk-func-account",permalink:"/tkg-sdk-doc/tkg-integration/sdk-basic/sdk-func-account",tags:[],version:"3.0.x",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"In App Purchase",permalink:"/tkg-sdk-doc/tkg-integration/sdk-basic/sdk-func-iap"},next:{title:"Advanced Integration",permalink:"/tkg-sdk-doc/tkg-integration/sdk-other-func"}},s={},g=[{value:"Account login",id:"account-login",level:2},{value:"Account logout (Optional)",id:"account-logout-optional",level:2},{value:"Login Mode Query interface (Optional)",id:"login-mode-query-interface-optional",level:2},{value:"Account delete (Required)",id:"account-delete-required",level:2},{value:"Account Binding  (Optional)",id:"account-binding--optional",level:2},{value:"Forced binding   (Optional)",id:"forced-binding---optional",level:2},{value:"Q&amp;A",id:"qa",level:2}],d={toc:g};function p(e){var n=e.components,r=(0,l.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"account-system"},"Account system"),(0,o.kt)("h2",{id:"account-login"},"Account login"),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Explanation")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"1\u3001We currently support the following login methods: Guest login, Google login (Android only), Facebook login, Apple login (iOS only), and Email login.",(0,o.kt)("br",{parentName:"p"}),"\n","2\u3001The SDK only provides the login interface, login screen customisation is up to the game itself.    "),(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},"The SDK's login interface initiates silent login for Guests, while Google, Facebook, Apple, and Email logins invoke their respective third-party login interfaces.    "),(0,o.kt)("li",{parentName:"ul"},"Games can opt to display their login screen immediately upon launch, allowing players to click on their preferred login method. Alternatively, a guest login can be initially used with account binding offered at a later progress point.    "),(0,o.kt)("li",{parentName:"ul"},"Please note, login involves calling the login interface, while account binding calls for the account binding interface. Guest and third-party accounts are only bound internally within the SDK when the account binding interface is called, otherwise, it's just a simple login (account switching).               ")),(0,o.kt)("p",{parentName:"div"},"3\u3001Direct calls for Guest, Google, Facebook, Apple, and Email logins each will return different UserIDs.         ",(0,o.kt)("font",{color:"ff0000"},"\uff08Refer to the account binding section for special cases involving account binding.\uff09"),"               "))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'TKGSDKManager.Instance.Login(LoginType.LOGIN_BY_GOOGLE, (loginStatus,  loginType,  loginMsg,  userId,  token,  email,  nickName,  iconUrl) =>{\n\n    Debug.Log("Login status code:"+loginStatus);\n    Debug.Log("Login type:" + loginType);\n    Debug.Log("Login status information:" + loginMsg);\n    Debug.Log("User ID:" + userId);\n    Debug.Log("token:" + token);\n    Debug.Log("email:" + email);\n    Debug.Log("nickName:" + nickName);\n    Debug.Log("icon url:" + iconUrl);\n    \n});\n\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," API: "),"     "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"void Login(LoginType _loginType, Action<LoginStatus, LoginType, string, string, string, string,string,string> _loginResultCallback)\n")),(0,o.kt)("table",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"Name"),(0,o.kt)("td",null,"isRequired"),(0,o.kt)("td",null,"Type"),(0,o.kt)("td",null,"Description")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"_loginType"),(0,o.kt)("td",null,"Y"),(0,o.kt)("td",null,"string"),(0,o.kt)("td",null,"Login type:",(0,o.kt)("br",null),"LoginType.LOGIN_BY_GUESTER  (guester login)",(0,o.kt)("br",null),"LoginType.LOGIN_BY_EMAIL    (email login)",(0,o.kt)("br",null),"LoginType.LOGIN_BY_GOOGLE   (Google login)",(0,o.kt)("br",null),"LoginType.LOGIN_BY_FACEBOOK (Facebook login)",(0,o.kt)("br",null),"LoginType.LOGIN_BY_Apple    (Apple login)",(0,o.kt)("br",null))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"_loginResultCallback"),(0,o.kt)("td",null,"Y"),(0,o.kt)("td",null,"Action"),(0,o.kt)("td",null,"Login callback:",(0,o.kt)("br",null),"loginStatus: Login status code(Binding successful\u3001Account already bound\uff0cNeed to select\u3001Binding failed\u3001Cancel binding)",(0,o.kt)("br",null),(0,o.kt)("br",null),"loginType: Login type",(0,o.kt)("font",{color:"ff0000"},"\uff08Use this result to determine the display of the bind button. Display only for guest logins.\uff09"),(0,o.kt)("br",null),(0,o.kt)("br",null),"loginMsg: Login status information(Text describes login reasons, not suggested for direct game use.)",(0,o.kt)("br",null),"userId: userid (UserID after binding)",(0,o.kt)("br",null),"token: token  (Can be used for server verification)",(0,o.kt)("br",null),"email: email  (Returns third-party account email)",(0,o.kt)("br",null),"nickName: nickName  (Returns third-party account nickname)",(0,o.kt)("br",null),"iconUrl: iconUrl  (Returns third-party account avatar URL)",(0,o.kt)("br",null)))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," Game login button diagram: "),"  ",(0,o.kt)("br",null),"\n",(0,o.kt)("img",{alt:"LoginPanel",src:t(4332).Z,width:"320",height:"569"})),(0,o.kt)("h2",{id:"account-logout-optional"},"Account logout (Optional)"),(0,o.kt)("p",null,"The account logout interface can be called when the game switches accounts for logout operations. The SDK will callback the game upon account exit. No need to call if not required.      "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"TKGSDKManager.Instance.Logout();\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," API: "),"     "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"void Logout(Action _logoutCallback = null)\n")),(0,o.kt)("table",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"Name"),(0,o.kt)("td",null,"isRequired"),(0,o.kt)("td",null,"Type"),(0,o.kt)("td",null,"Description")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"_logoutCallback"),(0,o.kt)("td",null,"N"),(0,o.kt)("td",null,"Action"),(0,o.kt)("td",null,"Logout login callback"))),(0,o.kt)("h2",{id:"login-mode-query-interface-optional"},"Login Mode Query interface (Optional)"),(0,o.kt)("p",null,"SDK controls supported login types, returning a list to the game. If used, game should adjust login UI dynamically."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"List<LoginType> list = TKGSDKManager.Instance.AvailableLoginChannelList();\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," API: "),"     "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"List<LoginType> AvailableLoginChannelList();\n")),(0,o.kt)("table",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"Type"),(0,o.kt)("td",null,"Description")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"List <LoginType> "),(0,o.kt)("td",null,"Returns the currently available login type."))),(0,o.kt)("h2",{id:"account-delete-required"},"Account delete (Required)"),(0,o.kt)("p",null,"To enhance transparency and user data control, Google requires games with account login to offer account deletion.       "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Games must add a deletion button, clicking it invokes the SDK's deletion interface, no further action is needed.       "),(0,o.kt)("li",{parentName:"ul"},"The SDK then handles deletion, provides a callback to the game, and exits immediately. Reopening the game will resemble a new user entry.       "),(0,o.kt)("li",{parentName:"ul"},"The deletion flow includes: long-press 'OK' for 5 seconds until progress bar fills up, triggering a second confirmation. Click 'OK' to send the game callback, closing the game; 'Cancel' exits the deletion interface.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"TKGSDKManager.Instance.DeleteAccount();\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," API: "),"     "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"//DeleteStatus.DELETE_ACCOUNT_FAILED  delete fail\n//DeleteStatus.DELETE_ACCOUNT_CANCEL  delete cancel\n//DeleteStatus.DELETE_ACCOUNT_SUCC    delete success\n\nvoid DeleteAccount(Action<DeleteStatus,string> _deleteAccountCallback = null);\n")),(0,o.kt)("table",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"Name"),(0,o.kt)("td",null,"isRequired"),(0,o.kt)("td",null,"Type"),(0,o.kt)("td",null,"Description")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"_deleteAccountCallback"),(0,o.kt)("td",null,"N"),(0,o.kt)("td",null,"Action <DeleteStatus,string> "),(0,o.kt)("td",null,"Deleting an account callback returns the deleted userId & statusCode."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," SDK Account Deletion Interface Effect Diagram: "),"  ",(0,o.kt)("br",null),"\n",(0,o.kt)("img",{alt:"LoginPanel",src:t(8835).Z,width:"800",height:"705"})),(0,o.kt)("h2",{id:"account-binding--optional"},"Account Binding  (Optional)"),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Explanation")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"1\u3001The account binding function is used to bind guest accounts to third-party account services in the game.",(0,o.kt)("br",{parentName:"p"}),"\n","2\u3001Only guest accounts can be bound to third-party accounts. Once a guest account has been bound, it cannot be bound again. If the binding interface is called again, a 'already bound account' status code will be returned.",(0,o.kt)("br",{parentName:"p"}),"\n","3\u3001The game may hide the binding button after binding. The binding button should only be displayed when loginType in the callback is the guest login type.",(0,o.kt)("br",{parentName:"p"}),"\n","4\u3001After a guest account is bound to a third-party account, the returned UserID is still the UserID of the guest account; it's just that the two are bound together in SDK internally.",(0,o.kt)("br",{parentName:"p"}),"\n","5\u3001As long as the guest account hasn't been bound to a social account, it has the right to bind to a social account. If the social account has already been bound by another guest account, there is the right to force binding. This involves the forced binding interface.",(0,o.kt)("br",{parentName:"p"}),"\n","6\u3001When users use a social account that has been previously bound for the binding operation, the game can pop up an interface listing the two accounts and corresponding game progress for players to choose which account to bind. After the player selects, calling the force binding interface can be done.    "))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'\nTKGSDKManager.Instance.BindAccount(LoginType.LOGIN_BY_FACEBOOK,(bindAccountStatus,loginType,loginMsg,userId,token,email,nickName,iconUrl,userIdList)=> {\n\n    Debug.Log("bind account status:" + bindAccountStatus);\n    Debug.Log("login type:" + loginType);\n    Debug.Log("login message:" + loginMsg);\n    Debug.Log("user ID:" + userId);\n    Debug.Log("token:" + token);\n    Debug.Log("email:" + email);\n    Debug.Log("nick name:" + nickName);\n    Debug.Log("icon url:" + iconUrl);\n    Debug.Log("userId list\uff1a"+userIdList);\n\n});\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," API: "),"     "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"void BindAccount(LoginType type,\n    Action<BindAccountStatus, LoginType, string, string, string, string, string, string, string[]>\n        _bindAccountCallback)\n")),(0,o.kt)("table",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"Name"),(0,o.kt)("td",null,"isRequired"),(0,o.kt)("td",null,"Type"),(0,o.kt)("td",null,"Description")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"_loginType"),(0,o.kt)("td",null,"Y"),(0,o.kt)("td",null,"string"),(0,o.kt)("td",null,"Login type:",(0,o.kt)("br",null),"LoginType.LOGIN_BY_GUESTER  (guester login)",(0,o.kt)("br",null),"LoginType.LOGIN_BY_EMAIL    (email login)",(0,o.kt)("br",null),"LoginType.LOGIN_BY_GOOGLE   (Google login)",(0,o.kt)("br",null),"LoginType.LOGIN_BY_FACEBOOK (Facebook login)",(0,o.kt)("br",null),"LoginType.LOGIN_BY_Apple    (Apple login)",(0,o.kt)("br",null))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"_bindAccountCallback"),(0,o.kt)("td",null,"Y"),(0,o.kt)("td",null,"Action"),(0,o.kt)("td",null,"Binding callback\uff1a",(0,o.kt)("br",null),"bindAccountStatus\uff1abinding account status (Binding successful, Account already bound, Need to select, Binding failed, Cancel binding) ",(0,o.kt)("br",null),(0,o.kt)("br",null),"loginType\uff1alogin type",(0,o.kt)("font",{color:"ff0000"},"(Use this result to determine the display of the bind button. Display only for guest logins.)"),(0,o.kt)("br",null),(0,o.kt)("br",null),"loginMsg\uff1a login message(Text describes login reasons, not suggested for direct game use.)",(0,o.kt)("br",null),(0,o.kt)("br",null),"userId\uff1auserId (UserID after binding) ",(0,o.kt)("br",null),"token\uff1atoken (Can be used for server verification) ",(0,o.kt)("br",null),"email\uff1aemail (Returns third-party account email) ",(0,o.kt)("br",null),"nickName\uff1anick name (Returns third-party account nickname) ",(0,o.kt)("br",null),"iconUrl\uff1aicon url  (Returns third-party account avatar URL) ",(0,o.kt)("br",null),"userIdList\uff1auser id list(If binding an existing Google account, returns guest and Google UserIDs for choice; else, returns guest UserID post binding.)",(0,o.kt)("br",null)))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," Diagram of in-game account binding: "),"  ",(0,o.kt)("br",null),"\n",(0,o.kt)("img",{alt:"LoginPanel",src:t(3570).Z,width:"320",height:"569"})),(0,o.kt)("h2",{id:"forced-binding---optional"},"Forced binding   (Optional)"),(0,o.kt)("p",null,"When binding with an already-bound social account, the game shows two accounts for player choice. After selection, call the force binding interface."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'\nTKGSDKManager.Instance.ForceBindAccount("userId001",(bindAccountStatus,loginType,loginMsg,userId,token,email,nickName,iconUrl,userIdList)=> {\n\n    Debug.Log("Binding status code:" + bindAccountStatus);\n    Debug.Log("login type:" + loginType);\n    Debug.Log("login message:" + loginMsg);\n    Debug.Log("user ID:" + userId);\n    Debug.Log("token:" + token);\n    Debug.Log("email:" + email);\n    Debug.Log("nick name:" + nickName);\n    Debug.Log("icon url:" + iconUrl);\n    Debug.Log("userId list\uff1a"+userIdList);\n\n});\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," API: "),"     "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"void ForceBindAccount(string userId,\n    Action<BindAccountStatus, LoginType, string, string, string, string, string, string, string[]>\n        _bindAccountCallback)\n")),(0,o.kt)("table",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"Name"),(0,o.kt)("td",null,"isRequired"),(0,o.kt)("td",null,"Type"),(0,o.kt)("td",null,"Description")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"userId"),(0,o.kt)("td",null,"Y"),(0,o.kt)("td",null,"string"),(0,o.kt)("td",null,"userId")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"_bindAccountCallback"),(0,o.kt)("td",null,"Y"),(0,o.kt)("td",null,"Action"),(0,o.kt)("td",null,"Binding callback\uff1a",(0,o.kt)("br",null),"bindAccountStatus\uff1abinding account status(Binding successful, Account already bound, Need to select, Binding failed, Cancel binding)",(0,o.kt)("br",null),(0,o.kt)("br",null),"loginType\uff1alogin type(Use this result to determine the display of the bind button. Display only for guest logins.)",(0,o.kt)("br",null),(0,o.kt)("br",null),"loginMsg\uff1a login message(Text describes login reasons, not suggested for direct game use.)",(0,o.kt)("br",null),(0,o.kt)("br",null),"userId\uff1auserId(UserID after binding)",(0,o.kt)("br",null),"token\uff1atoken  (Can be used for server verification)",(0,o.kt)("br",null),"email\uff1aemail (Returns third-party account email) ",(0,o.kt)("br",null),"nickName\uff1anick name (Returns third-party account nickname) ",(0,o.kt)("br",null),"iconUrl\uff1aicon url (Returns third-party account avatar URL)",(0,o.kt)("br",null),"userIdList\uff1auser id list (If binding an existing Google account, returns guest and Google UserIDs for choice; else, returns guest UserID post binding.) ",(0,o.kt)("br",null)))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," Diagram of in-game screen for choosing account to bind: "),"  ",(0,o.kt)("br",null),"\n",(0,o.kt)("img",{alt:"LoginPanel",src:t(2759).Z,width:"320",height:"569"})),(0,o.kt)("h2",{id:"qa"},"Q&A"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"1.\xa0Can\xa0one\xa0Google\xa0account\xa0correspond\xa0to\xa0multiple\xa0game\xa0accounts?"),"\nNo.\xa0One\xa0Google\xa0account\xa0can\xa0only\xa0correspond\xa0to\xa0one\xa0game\xa0account.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"2.\xa0If\xa0guest\xa0login\xa0is\xa0called\xa0first,\xa0then\xa0Google\xa0login,\xa0will\xa0guest\xa0and\xa0Google\xa0accounts\xa0bind?"),"No.\xa0This\xa0procedure\xa0will\xa0return\xa0a\xa0new\xa0UserID\xa0for\xa0a\xa0new\xa0account.\xa0Binding\xa0only\xa0occurs\xa0when\xa0the\xa0binding\xa0interface\xa0is\xa0called,\xa0returning\xa0the\xa0same\xa0UserID,\xa0specifically\xa0the\xa0guest\xa0account's\xa0UserID,\xa0using\xa0the\xa0same\xa0gaming\xa0process.\xa0However,\xa0guest\xa0UserIDs\xa0are\xa0device-dependent.\xa0If\xa0the\xa0device\xa0ID\xa0changes,\xa0the\xa0unbound\xa0guest\xa0account\xa0could\xa0be\xa0lost.\n",(0,o.kt)("strong",{parentName:"p"},"3.\xa0If\xa0I\xa0log\xa0in\xa0as\xa0a\xa0guest\xa0and\xa0return\xa0UserID1,\xa0then\xa0choose\xa0to\xa0bind\xa0the\xa0Google\xa0account\xa0after\xa0making\xa0progress,\xa0will\xa0my\xa0UserID\xa0change?"),"No.\xa0After\xa0binding,\xa0it\xa0will\xa0remain\xa0as\xa0UserID1.\xa0The\xa0SDK\xa0only\xa0performs\xa0an\xa0internal\xa0binding\xa0while\xa0keeping\xa0the\xa0original\xa0guest\xa0UserID.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"4.\xa0If\xa0I\xa0choose\xa0Google\xa0login\xa0when\xa0entering\xa0the\xa0game,\xa0make\xa0progress,\xa0then\xa0re-enter\xa0and\xa0choose\xa0guest\xa0login,\xa0then\xa0bind\xa0the\xa0Google\xa0account,\xa0what\xa0will\xa0happen?"),(0,o.kt)("br",{parentName:"p"}),"\n","When\xa0binding\xa0a\xa0Google\xa0account\xa0with\xa0game\xa0progress,\xa0the\xa0SDK\xa0will\xa0return\xa0two\xa0UserIDs\xa0to\xa0the\xa0game:\xa0the\xa0current\xa0guest\xa0account\xa0UserID\xa0and\xa0the\xa0UserID\xa0associated\xa0with\xa0the\xa0Google\xa0account.\xa0The\xa0game\xa0can\xa0produce\xa0an\xa0interface\xa0for\xa0the\xa0player\xa0to\xa0choose\xa0which\xa0game\xa0progress\xa0UserID\xa0they\xa0want\xa0to\xa0bind\xa0to\xa0their\xa0Google\xa0account,\xa0which\xa0is\xa0then\xa0passed\xa0to\xa0the\xa0SDK\xa0for\xa0force\xa0binding.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"5.\xa0For\xa0games\xa0that\xa0by\xa0default\xa0use\xa0guest\xa0login,\xa0if\xa0I\xa0play\xa0and\xa0bind\xa0my\xa0only\xa0Google\xa0account\xa0on\xa0device\xa0A,\xa0then\xa0play\xa0and\xa0try\xa0to\xa0bind\xa0with\xa0the\xa0same\xa0Google\xa0account\xa0on\xa0device\xa0B,\xa0what\xa0will\xa0happen?"),(0,o.kt)("br",{parentName:"p"}),"\n","This\xa0situation\xa0is\xa0the\xa0same\xa0as\xa0number\xa04,\xa0both\xa0involve\xa0binding\xa0an\xa0existing\xa0Google\xa0account.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"6.\xa0Will\xa0newly\xa0generated\xa0UserIDs\xa0be\xa0duplicated?"),(0,o.kt)("br",{parentName:"p"}),"\n","No.\xa0Newly\xa0generated\xa0UserIDs\xa0are\xa0unique\xa0and\xa0will\xa0not\xa0duplicate."))}p.isMDXComponent=!0},4332:function(e,n,t){n.Z=t.p+"assets/images/01login-7d1064f761d0950848ddf93144da03cd.jpg"},3570:function(e,n,t){n.Z=t.p+"assets/images/02bind-9d9976119ec934322f1c39607389b5f9.jpg"},8835:function(e,n,t){n.Z=t.p+"assets/images/03delete_01-b0eecd889da66594d1bdd87971f14add.jpeg"},2759:function(e,n,t){n.Z=t.p+"assets/images/04forcebind-c266e92493c5bc0fafb5be20e3747202.jpg"}}]);